"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–Ω, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
"""


from django.contrib import messages
from django.contrib.auth import login, authenticate, logout
from django.http import HttpResponse, JsonResponse
from django.shortcuts import render, redirect
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from django.urls import reverse

from .forms import UserRegistrationForm, LoginForm
from .doom_captcha import DoomCaptcha


def user_login(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É
    """
    if request.user.is_authenticated:
        return redirect('Market:index')
    
    if request.method == 'POST':
        form = LoginForm(request, data=request.POST)
        if form.is_valid():
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            
            if user is not None:
                login(request, user)
                messages.success(request, f'–í—ñ—Ç–∞—î–º–æ, {user.username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ —É–≤—ñ–π—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.')
                return redirect('Market:index')
            else:
                messages.error(request, '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å.')
        else:
            messages.error(request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ.')
    else:
        form = LoginForm()
    
    return render(request, 'Market/auth/login.html', {
        'form': form,
        'title': '–í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏'
    })


def user_register(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—É—Ç–µ–Ω—Ç–∏—á–Ω–æ–π DOOM 1993 CAPTCHA
    """
    if request.user.is_authenticated:
        return redirect('Market:index')
    
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç iframe DOOM CAPTCHA
        doom_completed = request.POST.get('doom_completed', 'false').lower() == 'true'
        doom_session = request.POST.get('doom_session', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—á–Ω—É—é DOOM CAPTCHA
        if not validate_doom_captcha(doom_completed, doom_session, request):
            messages.error(request, 'üéÆ DOOM CAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞! –í–±–∏–π—Ç–µ 3 –º–æ–Ω—Å—Ç—Ä–∏ –≤ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –≥—Ä—ñ DOOM 1993!')
            form.add_error(None, '–ü–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ–π—Ç–∏ DOOM CAPTCHA')
        elif form.is_valid():
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = form.save(commit=False)
            user.set_password(form.cleaned_data['password'])
            user.save()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            username = form.cleaned_data.get('username')
            password = form.cleaned_data.get('password')
            user = authenticate(username=username, password=password)
            
            if user is not None:
                login(request, user)
                messages.success(request, f'üéâ –í—ñ—Ç–∞—î–º–æ, {user.username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–π—à–ª–∏ DOOM CAPTCHA —ñ —Å—Ç–≤–æ—Ä–∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç!')
                return redirect('Market:index')
        else:
            messages.error(request, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —É —Ñ–æ—Ä–º—ñ.')
    else:
        form = UserRegistrationForm()
    
    return render(request, 'Market/auth/register.html', {
        'form': form,
        'title': '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è'
    })


def validate_doom_captcha(doom_completed, doom_session, request):
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è DOOM CAPTCHA (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å iframe)
    """
    from django.core.cache import cache
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not doom_completed or not doom_session:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–µ—Å—Å–∏–∏ (–±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞)
    if len(doom_session) < 5:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–∞–Ω–µ–µ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    cache_key = f'doom_session_used_{doom_session}'
    if cache.get(cache_key):
        return False
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é (–Ω–∞ 1 —á–∞—Å)
    cache.set(cache_key, True, 3600)
    
    return True


def get_client_ip(request):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
    """
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip


def user_logout(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    """
    if request.user.is_authenticated:
        username = request.user.username
        logout(request)
        messages.success(request, f'–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è, {username}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.')
    
    return redirect('Market:index')





@login_required
def profile(request):
    """
    –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return render(request, 'Market/auth/profile.html', {
        'title': f'–ü—Ä–æ—Ñ—ñ–ª—å - {request.user.username}'
    })